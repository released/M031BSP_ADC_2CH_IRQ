; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.ADC_IRQHandler||, CODE, READONLY, ALIGN=2

                  ADC_IRQHandler PROC
;;;107    
;;;108    void ADC_IRQHandler(void)
000000  4a0a              LDR      r2,|L1.44|
;;;109    {
;;;110    	aADCxConvertedData = ADC_GET_CONVERSION_DATA(ADC, aADCxCH);
000002  4b0b              LDR      r3,|L1.48|
000004  8891              LDRH     r1,[r2,#4]  ; aADCxCH
000006  0088              LSLS     r0,r1,#2
000008  18c0              ADDS     r0,r0,r3
00000a  6800              LDR      r0,[r0,#0]
;;;111    
;;;112    	if (aADCxCH == ADC0_CH0)
00000c  2900              CMP      r1,#0
00000e  b280              UXTH     r0,r0                 ;110
000010  8050              STRH     r0,[r2,#2]            ;110
000012  d002              BEQ      |L1.26|
;;;113    	{
;;;114    		adc_value1 = aADCxConvertedData ;
;;;115    	}
;;;116    	if (aADCxCH == ADC0_CH4)
000014  2904              CMP      r1,#4
000016  d002              BEQ      |L1.30|
000018  e002              B        |L1.32|
                  |L1.26|
00001a  80d0              STRH     r0,[r2,#6]            ;114
00001c  e000              B        |L1.32|
                  |L1.30|
;;;117    	{
;;;118    		adc_value2 = aADCxConvertedData ;
00001e  8110              STRH     r0,[r2,#8]
                  |L1.32|
;;;119    	}	
;;;120    	
;;;121        ADC_CLR_INT_FLAG(ADC, ADC_ADF_INT); /* Clear the A/D interrupt flag */
000020  4903              LDR      r1,|L1.48|
000022  2001              MOVS     r0,#1
000024  3180              ADDS     r1,r1,#0x80
000026  6108              STR      r0,[r1,#0x10]
;;;122    }
000028  4770              BX       lr
;;;123    
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      ||.data||
                  |L1.48|
                          DCD      0x40043000

                          AREA ||i.ADC_InitChannel||, CODE, READONLY, ALIGN=2

                  ADC_InitChannel PROC
;;;154    
;;;155    void ADC_InitChannel(uint8_t ch)
000000  b5f8              PUSH     {r3-r7,lr}
;;;156    {
;;;157    //	ADC_ReadAVdd();
;;;158    
;;;159    //    /* Enable ADC converter */
;;;160    //    ADC_POWER_ON(ADC);
;;;161    
;;;162    //    /*Wait for ADC internal power ready*/
;;;163    //    CLK_SysTickDelay(10000);
;;;164    
;;;165        /* Set input mode as single-end, and Single mode*/
;;;166        ADC_Open(ADC, ADC_ADCR_DIFFEN_SINGLE_END, ADC_ADCR_ADMD_SINGLE,(uint32_t) 0x1 << ch);//BIT0|BIT4
000002  2601              MOVS     r6,#1
000004  4633              MOV      r3,r6
000006  4083              LSLS     r3,r3,r0
000008  4f0e              LDR      r7,|L2.68|
00000a  2200              MOVS     r2,#0
00000c  461d              MOV      r5,r3
00000e  4611              MOV      r1,r2
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       ADC_Open
;;;167    
;;;168        /* To sample band-gap precisely, the ADC capacitor must be charged at least 3 us for charging the ADC capacitor ( Cin )*/
;;;169        /* Sampling time = extended sampling time + 1 */
;;;170        /* 1/24000000 * (Sampling time) = 3 us */
;;;171    	/*
;;;172    	    printf("+----------------------------------------------------------------------+\n");
;;;173    	    printf("|   ADC clock source -> PCLK1  = 48 MHz                                |\n");
;;;174    	    printf("|   ADC clock divider          = 2                                     |\n");
;;;175    	    printf("|   ADC clock                  = 48 MHz / 2 = 24 MHz                   |\n");
;;;176    	    printf("|   ADC extended sampling time = 71                                    |\n");
;;;177    	    printf("|   ADC conversion time = 17 + ADC extended sampling time = 88         |\n");
;;;178    	    printf("|   ADC conversion rate = 24 MHz / 88 = 272.7 ksps                     |\n");
;;;179    	    printf("+----------------------------------------------------------------------+\n");
;;;180    	*/
;;;181    
;;;182        /* Set extend sampling time based on external resistor value.*/
;;;183        ADC_SetExtendSampleTime(ADC,(uint32_t) NULL, ADCextendSampling);
000016  2200              MOVS     r2,#0
000018  4611              MOV      r1,r2
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       ADC_SetExtendSampleTime
;;;184    
;;;185        /* Select ADC input channel */
;;;186        ADC_SET_INPUT_CHANNEL(ADC, 0x1 << ch);
000020  4c08              LDR      r4,|L2.68|
000022  3480              ADDS     r4,r4,#0x80
000024  6860              LDR      r0,[r4,#4]
000026  6065              STR      r5,[r4,#4]
;;;187    
;;;188    	ADC_CLR_INT_FLAG(ADC, ADC_ADF_INT);
000028  6126              STR      r6,[r4,#0x10]
;;;189    	ADC_ENABLE_INT(ADC, ADC_ADF_INT);
00002a  2101              MOVS     r1,#1
00002c  4638              MOV      r0,r7
00002e  f7fffffe          BL       ADC_EnableInt
000032  4905              LDR      r1,|L2.72|
000034  05a0              LSLS     r0,r4,#22
000036  6008              STR      r0,[r1,#0]
;;;190    	NVIC_EnableIRQ(ADC_IRQn);
;;;191    
;;;192        /* Start ADC conversion */
;;;193        ADC_START_CONV(ADC);
000038  6820              LDR      r0,[r4,#0]
00003a  14e1              ASRS     r1,r4,#19
00003c  4308              ORRS     r0,r0,r1
00003e  6020              STR      r0,[r4,#0]
;;;194    	
;;;195    }
000040  bdf8              POP      {r3-r7,pc}
;;;196    
                          ENDP

000042  0000              DCW      0x0000
                  |L2.68|
                          DCD      0x40043000
                  |L2.72|
                          DCD      0xe000e100

                          AREA ||i.ADC_ReadAVdd||, CODE, READONLY, ALIGN=2

                  ADC_ReadAVdd PROC
;;;123    
;;;124    void ADC_ReadAVdd(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;125    {
;;;126        int32_t  i32ConversionData;
;;;127        int32_t  i32BuiltInData;
;;;128    
;;;129        ADC_POWER_ON(ADC);
000002  4d22              LDR      r5,|L3.140|
000004  6828              LDR      r0,[r5,#0]
000006  2601              MOVS     r6,#1
000008  4330              ORRS     r0,r0,r6
00000a  6028              STR      r0,[r5,#0]
;;;130        CLK_SysTickDelay(10000);
00000c  4820              LDR      r0,|L3.144|
00000e  f7fffffe          BL       CLK_SysTickDelay
;;;131    
;;;132    	
;;;133        ADC_Open(ADC, ADC_ADCR_DIFFEN_SINGLE_END, ADC_ADCR_ADMD_SINGLE, BIT29);
000012  4f1e              LDR      r7,|L3.140|
000014  05ac              LSLS     r4,r5,#22
000016  2200              MOVS     r2,#0
000018  3f80              SUBS     r7,r7,#0x80
00001a  4623              MOV      r3,r4
00001c  4611              MOV      r1,r2
00001e  4638              MOV      r0,r7
000020  f7fffffe          BL       ADC_Open
;;;134        ADC_SetExtendSampleTime(ADC, 0, 71);
000024  2247              MOVS     r2,#0x47
000026  2100              MOVS     r1,#0
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       ADC_SetExtendSampleTime
;;;135        ADC_CLR_INT_FLAG(ADC, ADC_ADF_INT);
00002e  612e              STR      r6,[r5,#0x10]
;;;136        ADC_ENABLE_INT(ADC, ADC_ADF_INT);
000030  2101              MOVS     r1,#1
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       ADC_EnableInt
000038  4816              LDR      r0,|L3.148|
00003a  6004              STR      r4,[r0,#0]
;;;137        NVIC_EnableIRQ(ADC_IRQn);
;;;138        ADC_START_CONV(ADC);
00003c  6828              LDR      r0,[r5,#0]
00003e  14a1              ASRS     r1,r4,#18
000040  4308              ORRS     r0,r0,r1
000042  6028              STR      r0,[r5,#0]
;;;139    
;;;140        ADC_DISABLE_INT(ADC, ADC_ADF_INT);
000044  2101              MOVS     r1,#1
000046  4638              MOV      r0,r7
000048  f7fffffe          BL       ADC_DisableInt
;;;141    		
;;;142        i32ConversionData = ADC_GET_CONVERSION_DATA(ADC, 29);
00004c  480f              LDR      r0,|L3.140|
00004e  3840              SUBS     r0,r0,#0x40
000050  6b40              LDR      r0,[r0,#0x34]
000052  b285              UXTH     r5,r0
;;;143        SYS_UnlockReg();
000054  f7fffffe          BL       SYS_UnlockReg
;;;144        FMC_Open();
000058  f7fffffe          BL       FMC_Open
00005c  480e              LDR      r0,|L3.152|
00005e  2104              MOVS     r1,#4
000060  60c1              STR      r1,[r0,#0xc]
000062  2170              MOVS     r1,#0x70
000064  6041              STR      r1,[r0,#4]
000066  6106              STR      r6,[r0,#0x10]
                  |L3.104|
000068  6902              LDR      r2,[r0,#0x10]
00006a  07d1              LSLS     r1,r2,#31
00006c  d1fc              BNE      |L3.104|
00006e  6880              LDR      r0,[r0,#8]
;;;145        i32BuiltInData = FMC_ReadBandGap();	
;;;146    
;;;147    	AVdd = 3072*i32BuiltInData/i32ConversionData;
000070  2103              MOVS     r1,#3
000072  0500              LSLS     r0,r0,#20
000074  0d00              LSRS     r0,r0,#20
000076  0289              LSLS     r1,r1,#10
000078  4348              MULS     r0,r1,r0
00007a  4629              MOV      r1,r5
00007c  f7fffffe          BL       __aeabi_idivmod
000080  4906              LDR      r1,|L3.156|
000082  6108              STR      r0,[r1,#0x10]  ; AVdd
000084  4803              LDR      r0,|L3.148|
000086  3080              ADDS     r0,r0,#0x80
000088  6004              STR      r4,[r0,#0]
;;;148    
;;;149    //	printf("%s : %d,%d,%d\r\n",__FUNCTION__,AVdd, i32ConversionData,i32BuiltInData);
;;;150    
;;;151        NVIC_DisableIRQ(ADC_IRQn);
;;;152    	
;;;153    }
00008a  bdf8              POP      {r3-r7,pc}
;;;154    
                          ENDP

                  |L3.140|
                          DCD      0x40043080
                  |L3.144|
                          DCD      0x00002710
                  |L3.148|
                          DCD      0xe000e100
                  |L3.152|
                          DCD      0x4000c000
                  |L3.156|
                          DCD      ||.data||

                          AREA ||i.CLK_SysTickDelay||, CODE, READONLY, ALIGN=2

                  CLK_SysTickDelay PROC
;;;503      */
;;;504    __STATIC_INLINE void CLK_SysTickDelay(uint32_t us)
000000  4906              LDR      r1,|L4.28|
;;;505    {
;;;506        SysTick->LOAD = us * CyclesPerUs;
000002  6809              LDR      r1,[r1,#0]  ; CyclesPerUs
000004  4348              MULS     r0,r1,r0
000006  4906              LDR      r1,|L4.32|
000008  6148              STR      r0,[r1,#0x14]
;;;507        SysTick->VAL  = (0x00);
00000a  2200              MOVS     r2,#0
00000c  618a              STR      r2,[r1,#0x18]
;;;508        SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
00000e  2005              MOVS     r0,#5
000010  6108              STR      r0,[r1,#0x10]
                  |L4.18|
;;;509    
;;;510        /* Waiting for down-count to zero */
;;;511        while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
000012  6908              LDR      r0,[r1,#0x10]
000014  03c0              LSLS     r0,r0,#15
000016  d5fc              BPL      |L4.18|
;;;512    
;;;513        /* Disable SysTick counter */
;;;514        SysTick->CTRL = 0;
000018  610a              STR      r2,[r1,#0x10]
;;;515    }
00001a  4770              BX       lr
;;;516    
                          ENDP

                  |L4.28|
                          DCD      CyclesPerUs
                  |L4.32|
                          DCD      0xe000e000

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;266    
;;;267    void SYS_Init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;268    {
;;;269        /* Unlock protected registers */
;;;270        SYS_UnlockReg();
000002  f7fffffe          BL       SYS_UnlockReg
;;;271    
;;;272        /* Enable HIRC clock (Internal RC 48MHz) */
;;;273        CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000006  2004              MOVS     r0,#4
000008  f7fffffe          BL       CLK_EnableXtalRC
;;;274    //    CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk);
;;;275    	
;;;276        /* Wait for HIRC clock ready */
;;;277        CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00000c  2010              MOVS     r0,#0x10
00000e  f7fffffe          BL       CLK_WaitClockReady
;;;278    //    CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
;;;279    	
;;;280        /* Select HCLK clock source as HIRC and HCLK source divider as 1 */
;;;281        CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
000012  2100              MOVS     r1,#0
000014  2007              MOVS     r0,#7
000016  f7fffffe          BL       CLK_SetHCLK
;;;282    
;;;283        /* Enable UART0 clock */
;;;284        CLK_EnableModuleClock(UART0_MODULE);
00001a  4c1f              LDR      r4,|L5.152|
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       CLK_EnableModuleClock
;;;285        CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART0SEL_PCLK0, CLK_CLKDIV0_UART0(1));
000022  2101              MOVS     r1,#1
000024  2200              MOVS     r2,#0
000026  0689              LSLS     r1,r1,#26
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       CLK_SetModuleClock
;;;286    	
;;;287        CLK_EnableModuleClock(TMR3_MODULE);
00002e  4d1b              LDR      r5,|L5.156|
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       CLK_EnableModuleClock
;;;288        CLK_SetModuleClock(TMR3_MODULE, CLK_CLKSEL1_TMR3SEL_PCLK1, 0);
000036  2401              MOVS     r4,#1
000038  0564              LSLS     r4,r4,#21
00003a  2200              MOVS     r2,#0
00003c  4621              MOV      r1,r4
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       CLK_SetModuleClock
;;;289    	
;;;290        CLK_EnableModuleClock(ADC_MODULE);	
000044  4d16              LDR      r5,|L5.160|
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       CLK_EnableModuleClock
;;;291        CLK_SetModuleClock(ADC_MODULE, CLK_CLKSEL2_ADCSEL_PCLK1, CLK_CLKDIV0_ADC(2));
00004c  1162              ASRS     r2,r4,#5
00004e  4621              MOV      r1,r4
000050  4628              MOV      r0,r5
000052  f7fffffe          BL       CLK_SetModuleClock
;;;292    
;;;293        /* Update System Core Clock */
;;;294        SystemCoreClockUpdate();
000056  f7fffffe          BL       SystemCoreClockUpdate
;;;295    
;;;296        /* Set PB multi-function pins for UART0 RXD=PB.12 and TXD=PB.13 */
;;;297        SYS->GPB_MFPH = (SYS->GPB_MFPH & ~(SYS_GPB_MFPH_PB12MFP_Msk | SYS_GPB_MFPH_PB13MFP_Msk))    |       \
00005a  0260              LSLS     r0,r4,#9
00005c  6bc1              LDR      r1,[r0,#0x3c]
00005e  22ff              MOVS     r2,#0xff
000060  0412              LSLS     r2,r2,#16
000062  4391              BICS     r1,r1,r2
000064  2233              MOVS     r2,#0x33
000066  0452              LSLS     r2,r2,#17
000068  1889              ADDS     r1,r1,r2
00006a  63c1              STR      r1,[r0,#0x3c]
;;;298                        (SYS_GPB_MFPH_PB12MFP_UART0_RXD | SYS_GPB_MFPH_PB13MFP_UART0_TXD);
;;;299    
;;;300    
;;;301        SYS->GPB_MFPL = (SYS->GPB_MFPL &~(SYS_GPB_MFPL_PB0MFP_Msk | SYS_GPB_MFPL_PB4MFP_Msk )) \
00006c  6b81              LDR      r1,[r0,#0x38]
00006e  4a0d              LDR      r2,|L5.164|
000070  4011              ANDS     r1,r1,r2
000072  4a0d              LDR      r2,|L5.168|
000074  1889              ADDS     r1,r1,r2
000076  6381              STR      r1,[r0,#0x38]
;;;302                        | (SYS_GPB_MFPL_PB0MFP_ADC0_CH0 | SYS_GPB_MFPL_PB4MFP_ADC0_CH4) ;
;;;303    
;;;304        /* Set PB.0 ~ PB.3 to input mode */
;;;305        GPIO_SetMode(PB, BIT0|BIT4, GPIO_MODE_INPUT);
000078  4c0c              LDR      r4,|L5.172|
00007a  2200              MOVS     r2,#0
00007c  2111              MOVS     r1,#0x11
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       GPIO_SetMode
;;;306    
;;;307        /* Disable the PB0 ~ PB3 digital input path to avoid the leakage current. */
;;;308        GPIO_DISABLE_DIGITAL_PATH(PB, BIT0|BIT4);
000084  6861              LDR      r1,[r4,#4]
000086  2211              MOVS     r2,#0x11
000088  0412              LSLS     r2,r2,#16
00008a  4311              ORRS     r1,r1,r2
00008c  6061              STR      r1,[r4,#4]
00008e  4908              LDR      r1,|L5.176|
000090  2000              MOVS     r0,#0
000092  6008              STR      r0,[r1,#0]
;;;309    
;;;310        /* Lock protected registers */
;;;311        SYS_LockReg();
;;;312    }
000094  bd70              POP      {r4-r6,pc}
;;;313    
                          ENDP

000096  0000              DCW      0x0000
                  |L5.152|
                          DCD      0x5f803d10
                  |L5.156|
                          DCD      0x5f400005
                  |L5.160|
                          DCD      0x6743fe1c
                  |L5.164|
                          DCD      0xfff0fff0
                  |L5.168|
                          DCD      0x00010001
                  |L5.172|
                          DCD      0x40004040
                  |L5.176|
                          DCD      0x40000100

                          AREA ||i.SYS_UnlockReg||, CODE, READONLY, ALIGN=2

                  SYS_UnlockReg PROC
;;;1341     */
;;;1342   __STATIC_INLINE void SYS_UnlockReg(void)
000000  b510              PUSH     {r4,lr}
;;;1343   {
;;;1344       do {
;;;1345           SYS->REGLCTL = 0x59;
000002  2159              MOVS     r1,#0x59
000004  4804              LDR      r0,|L6.24|
;;;1346           SYS->REGLCTL = 0x16;
000006  2216              MOVS     r2,#0x16
;;;1347           SYS->REGLCTL = 0x88;
000008  2388              MOVS     r3,#0x88
                  |L6.10|
00000a  6001              STR      r1,[r0,#0]            ;1345
00000c  6002              STR      r2,[r0,#0]            ;1346
00000e  6003              STR      r3,[r0,#0]
;;;1348       } while (SYS->REGLCTL == 0);
000010  6804              LDR      r4,[r0,#0]
000012  2c00              CMP      r4,#0
000014  d0f9              BEQ      |L6.10|
;;;1349   }
000016  bd10              POP      {r4,pc}
;;;1350   
                          ENDP

                  |L6.24|
                          DCD      0x40000100

                          AREA ||i.TIMER3_Init||, CODE, READONLY, ALIGN=2

                  TIMER3_Init PROC
;;;240    
;;;241    void TIMER3_Init(void)
000000  b510              PUSH     {r4,lr}
;;;242    {
;;;243        TIMER_Open(TIMER3, TIMER_PERIODIC_MODE, 1000);
000002  4c0a              LDR      r4,|L7.44|
000004  227d              MOVS     r2,#0x7d
000006  2101              MOVS     r1,#1
000008  00d2              LSLS     r2,r2,#3
00000a  06c9              LSLS     r1,r1,#27
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       TIMER_Open
000012  6820              LDR      r0,[r4,#0]
000014  0621              LSLS     r1,r4,#24
000016  4308              ORRS     r0,r0,r1
000018  6020              STR      r0,[r4,#0]
00001a  1488              ASRS     r0,r1,#18
00001c  4904              LDR      r1,|L7.48|
00001e  6008              STR      r0,[r1,#0]
000020  6820              LDR      r0,[r4,#0]
000022  0589              LSLS     r1,r1,#22
000024  4308              ORRS     r0,r0,r1
000026  6020              STR      r0,[r4,#0]
;;;244        TIMER_EnableInt(TIMER3);
;;;245        NVIC_EnableIRQ(TMR3_IRQn);	
;;;246        TIMER_Start(TIMER3);
;;;247    }
000028  bd10              POP      {r4,pc}
;;;248    
                          ENDP

00002a  0000              DCW      0x0000
                  |L7.44|
                          DCD      0x40051020
                  |L7.48|
                          DCD      0xe000e100

                          AREA ||i.TMR3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR3_IRQHandler PROC
;;;197    
;;;198    void TMR3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
000002  4911              LDR      r1,|L8.72|
000004  6888              LDR      r0,[r1,#8]
000006  07c0              LSLS     r0,r0,#31
000008  0fc0              LSRS     r0,r0,#31
;;;199    {
00000a  d01a              BEQ      |L8.66|
00000c  2301              MOVS     r3,#1
00000e  608b              STR      r3,[r1,#8]
;;;200    //	static uint32_t LOG = 0;
;;;201    	static uint16_t CNT = 0;
;;;202    	static uint16_t CNT_ADC = 0;
;;;203    	static uint8_t flag = 0;
;;;204    	
;;;205        if(TIMER_GetIntFlag(TIMER3) == 1)
;;;206        {
;;;207            TIMER_ClearIntFlag(TIMER3);
;;;208    	
;;;209    		if (CNT++ >= 1000)
000010  490e              LDR      r1,|L8.76|
000012  247d              MOVS     r4,#0x7d
000014  8948              LDRH     r0,[r1,#0xa]  ; CNT
000016  00e4              LSLS     r4,r4,#3
000018  1c42              ADDS     r2,r0,#1
00001a  814a              STRH     r2,[r1,#0xa]
00001c  2200              MOVS     r2,#0
00001e  42a0              CMP      r0,r4
000020  d300              BCC      |L8.36|
;;;210    		{		
;;;211    			CNT = 0;
000022  814a              STRH     r2,[r1,#0xa]
                  |L8.36|
;;;212    //        	printf("%s : %4d\r\n",__FUNCTION__,LOG++);
;;;213    		}
;;;214    
;;;215    		if (CNT_ADC++ >= ADC_SAMPLETIME_MS)
000024  8988              LDRH     r0,[r1,#0xc]  ; CNT_ADC
000026  1c44              ADDS     r4,r0,#1
000028  818c              STRH     r4,[r1,#0xc]
00002a  280a              CMP      r0,#0xa
00002c  d309              BCC      |L8.66|
;;;216    		{		
;;;217    			CNT_ADC = 0;
00002e  818a              STRH     r2,[r1,#0xc]
;;;218    //			ADC_ConvertChannel(ADC0_CH0);
;;;219    
;;;220    			flag ^= 1;
000030  7808              LDRB     r0,[r1,#0]  ; flag
000032  4058              EORS     r0,r0,r3
000034  7008              STRB     r0,[r1,#0]
;;;221    
;;;222    			if (flag == 0)
000036  d005              BEQ      |L8.68|
;;;223    			{
;;;224    				aADCxCH = ADC0_CH0;
;;;225    			}
;;;226    			else
;;;227    			{
;;;228    				aADCxCH = ADC0_CH4;
000038  2004              MOVS     r0,#4
00003a  8088              STRH     r0,[r1,#4]
                  |L8.60|
;;;229    			}
;;;230    
;;;231    			
;;;232    			ADC_InitChannel(aADCxCH);
00003c  7908              LDRB     r0,[r1,#4]  ; aADCxCH
00003e  f7fffffe          BL       ADC_InitChannel
                  |L8.66|
;;;233    
;;;234    
;;;235    		}
;;;236    		
;;;237        }
;;;238    }
000042  bd10              POP      {r4,pc}
                  |L8.68|
000044  808a              STRH     r2,[r1,#4]            ;224
000046  e7f9              B        |L8.60|
;;;239    
                          ENDP

                  |L8.72|
                          DCD      0x40051020
                  |L8.76|
                          DCD      ||.data||

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UART0_Init PROC
;;;249    
;;;250    void UART0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;251    {
;;;252        SYS_ResetModule(UART0_RST);
000002  4813              LDR      r0,|L9.80|
000004  f7fffffe          BL       SYS_ResetModule
;;;253    
;;;254        /* Configure UART0 and set UART0 baud rate */
;;;255        UART_Open(UART0, 115200);
000008  21e1              MOVS     r1,#0xe1
00000a  0249              LSLS     r1,r1,#9
00000c  4811              LDR      r0,|L9.84|
00000e  f7fffffe          BL       UART_Open
;;;256    
;;;257    	/* Set UART receive time-out */
;;;258    //	UART_SetTimeoutCnt(UART0, 20);
;;;259    
;;;260    	printf("\r\nCLK_GetCPUFreq : %8d\r\n",CLK_GetCPUFreq());
000012  f7fffffe          BL       CLK_GetCPUFreq
000016  4601              MOV      r1,r0
000018  a00f              ADR      r0,|L9.88|
00001a  f7fffffe          BL       __2printf
;;;261    	printf("CLK_GetHXTFreq : %8d\r\n",CLK_GetHXTFreq());
00001e  f7fffffe          BL       CLK_GetHXTFreq
000022  4601              MOV      r1,r0
000024  a013              ADR      r0,|L9.116|
000026  f7fffffe          BL       __2printf
;;;262    	printf("CLK_GetLXTFreq : %8d\r\n",CLK_GetLXTFreq());	
00002a  f7fffffe          BL       CLK_GetLXTFreq
00002e  4601              MOV      r1,r0
000030  a016              ADR      r0,|L9.140|
000032  f7fffffe          BL       __2printf
;;;263    	printf("CLK_GetPCLK0Freq : %8d\r\n",CLK_GetPCLK0Freq());
000036  f7fffffe          BL       CLK_GetPCLK0Freq
00003a  4601              MOV      r1,r0
00003c  a019              ADR      r0,|L9.164|
00003e  f7fffffe          BL       __2printf
;;;264    	printf("CLK_GetPCLK1Freq : %8d\r\n",CLK_GetPCLK1Freq());	
000042  f7fffffe          BL       CLK_GetPCLK1Freq
000046  4601              MOV      r1,r0
000048  a01d              ADR      r0,|L9.192|
00004a  f7fffffe          BL       __2printf
;;;265    }
00004e  bd10              POP      {r4,pc}
;;;266    
                          ENDP

                  |L9.80|
                          DCD      0x04000010
                  |L9.84|
                          DCD      0x40070000
                  |L9.88|
000058  0d0a434c          DCB      "\r\nCLK_GetCPUFreq : %8d\r\n",0
00005c  4b5f4765
000060  74435055
000064  46726571
000068  203a2025
00006c  38640d0a
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0
                  |L9.116|
000074  434c4b5f          DCB      "CLK_GetHXTFreq : %8d\r\n",0
000078  47657448
00007c  58544672
000080  6571203a
000084  20253864
000088  0d0a00  
00008b  00                DCB      0
                  |L9.140|
00008c  434c4b5f          DCB      "CLK_GetLXTFreq : %8d\r\n",0
000090  4765744c
000094  58544672
000098  6571203a
00009c  20253864
0000a0  0d0a00  
0000a3  00                DCB      0
                  |L9.164|
0000a4  434c4b5f          DCB      "CLK_GetPCLK0Freq : %8d\r\n",0
0000a8  47657450
0000ac  434c4b30
0000b0  46726571
0000b4  203a2025
0000b8  38640d0a
0000bc  00      
0000bd  00                DCB      0
0000be  00                DCB      0
0000bf  00                DCB      0
                  |L9.192|
0000c0  434c4b5f          DCB      "CLK_GetPCLK1Freq : %8d\r\n",0
0000c4  47657450
0000c8  434c4b31
0000cc  46726571
0000d0  203a2025
0000d4  38640d0a
0000d8  00      
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0

                          AREA ||i.convertDecToBin||, CODE, READONLY, ALIGN=2

                  convertDecToBin PROC
;;;87     
;;;88     void convertDecToBin(int n)
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;89     {
000002  b082              SUB      sp,sp,#8
;;;90         int k = 0;
000004  2500              MOVS     r5,#0
;;;91         unsigned char *p = (unsigned char*)&n;
000006  a802              ADD      r0,sp,#8
;;;92         int val2 = 0;
;;;93         int i = 0;
;;;94         for(k = 0; k <= 1; k++)
;;;95         {
;;;96             val2 = *(p+k);
;;;97             for (i = 7; i >= 0; i--)
;;;98             {
;;;99                 if(val2 & (1 << i))
000008  2701              MOVS     r7,#1
00000a  9000              STR      r0,[sp,#0]
                  |L10.12|
00000c  9800              LDR      r0,[sp,#0]            ;96
00000e  2407              MOVS     r4,#7                 ;97
000010  5d46              LDRB     r6,[r0,r5]            ;96
                  |L10.18|
000012  4638              MOV      r0,r7
000014  40a0              LSLS     r0,r0,r4
000016  4230              TST      r0,r6
000018  d001              BEQ      |L10.30|
;;;100                    printf("1");
00001a  a007              ADR      r0,|L10.56|
00001c  e000              B        |L10.32|
                  |L10.30|
;;;101                else
;;;102                    printf("0");
00001e  a007              ADR      r0,|L10.60|
                  |L10.32|
000020  f7fffffe          BL       __2printf
000024  1e64              SUBS     r4,r4,#1
000026  d5f4              BPL      |L10.18|
;;;103            }
;;;104            printf(" ");
000028  a005              ADR      r0,|L10.64|
00002a  f7fffffe          BL       __2printf
00002e  1c6d              ADDS     r5,r5,#1
000030  2d01              CMP      r5,#1                 ;94
000032  ddeb              BLE      |L10.12|
;;;105        }
;;;106    }
000034  bdfe              POP      {r1-r7,pc}
;;;107    
                          ENDP

000036  0000              DCW      0x0000
                  |L10.56|
000038  3100              DCB      "1",0
00003a  00                DCB      0
00003b  00                DCB      0
                  |L10.60|
00003c  3000              DCB      "0",0
00003e  00                DCB      0
00003f  00                DCB      0
                  |L10.64|
000040  2000              DCB      " ",0
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                  main PROC
;;;321    
;;;322    int main()
000000  f7fffffe          BL       SYS_Init
;;;323    {
;;;324        SYS_Init();
;;;325    
;;;326        UART0_Init();
000004  f7fffffe          BL       UART0_Init
;;;327    
;;;328    	TIMER3_Init();
000008  f7fffffe          BL       TIMER3_Init
;;;329    
;;;330        /* Enable ADC converter */
;;;331        ADC_POWER_ON(ADC);
00000c  4915              LDR      r1,|L11.100|
00000e  6808              LDR      r0,[r1,#0]
000010  2201              MOVS     r2,#1
000012  4310              ORRS     r0,r0,r2
000014  6008              STR      r0,[r1,#0]
;;;332    
;;;333        /*Wait for ADC internal power ready*/
;;;334        CLK_SysTickDelay(10000);
000016  4814              LDR      r0,|L11.104|
000018  f7fffffe          BL       CLK_SysTickDelay
;;;335    
;;;336        /* Got no where to go, just loop forever */
;;;337        while(1)
;;;338        {
;;;339    
;;;340    		convertDecToBin(adc_value1);
00001c  4e13              LDR      r6,|L11.108|
;;;341    		printf(" 0x%4X , %4dmv " , adc_value1 , ADC_CALC_DATA_TO_VOLTAGE(adc_value1,ADC_REF_VOLTAGE));
00001e  4d14              LDR      r5,|L11.112|
                  |L11.32|
000020  88f0              LDRH     r0,[r6,#6]            ;340  ; adc_value1
000022  f7fffffe          BL       convertDecToBin
000026  88f4              LDRH     r4,[r6,#6]  ; adc_value1
000028  4812              LDR      r0,|L11.116|
00002a  4629              MOV      r1,r5
00002c  4360              MULS     r0,r4,r0
00002e  f7fffffe          BL       __aeabi_uidivmod
000032  4602              MOV      r2,r0
000034  4621              MOV      r1,r4
000036  a010              ADR      r0,|L11.120|
000038  f7fffffe          BL       __2printf
;;;342    		printf("      ");
00003c  a012              ADR      r0,|L11.136|
00003e  f7fffffe          BL       __2printf
;;;343    		convertDecToBin(adc_value2);	
000042  8930              LDRH     r0,[r6,#8]  ; adc_value2
000044  f7fffffe          BL       convertDecToBin
;;;344    		printf(" 0x%4X , %4dmv\r\n" , adc_value2, ADC_CALC_DATA_TO_VOLTAGE(adc_value2,ADC_REF_VOLTAGE));
000048  8930              LDRH     r0,[r6,#8]  ; adc_value2
00004a  490a              LDR      r1,|L11.116|
00004c  4604              MOV      r4,r0
00004e  4348              MULS     r0,r1,r0
000050  4629              MOV      r1,r5
000052  f7fffffe          BL       __aeabi_uidivmod
000056  4602              MOV      r2,r0
000058  4621              MOV      r1,r4
00005a  a00d              ADR      r0,|L11.144|
00005c  f7fffffe          BL       __2printf
000060  e7de              B        |L11.32|
;;;345        }
;;;346    }
;;;347    
                          ENDP

000062  0000              DCW      0x0000
                  |L11.100|
                          DCD      0x40043080
                  |L11.104|
                          DCD      0x00002710
                  |L11.108|
                          DCD      ||.data||
                  |L11.112|
                          DCD      0x00000fff
                  |L11.116|
                          DCD      0x00000ce4
                  |L11.120|
000078  20307825          DCB      " 0x%4X , %4dmv ",0
00007c  3458202c
000080  20253464
000084  6d762000
                  |L11.136|
000088  20202020          DCB      "      ",0
00008c  202000  
00008f  00                DCB      0
                  |L11.144|
000090  20307825          DCB      " 0x%4X , %4dmv\r\n",0
000094  3458202c
000098  20253464
00009c  6d760d0a
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  flag
000000  0000              DCB      0x00,0x00
                  aADCxConvertedData
000002  0000              DCW      0x0000
                  aADCxCH
000004  0000              DCW      0x0000
                  adc_value1
000006  0000              DCW      0x0000
                  adc_value2
000008  0000              DCW      0x0000
                  ||CNT||
00000a  0000              DCW      0x0000
                  CNT_ADC
00000c  0000              DCW      0x0000
00000e  0000              DCB      0x00,0x00
                  AVdd
                          DCD      0x00000000

                          AREA ||area_number.15||, DATA, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.data||
                  BitFlag
                          DCD      0x00000000

                          AREA ||area_number.16||, DATA, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.data||
                  ADC_CH_TypeDef
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_164135a7____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_164135a7____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_164135a7____REVSH|
#line 402
|__asm___6_main_c_164135a7____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
